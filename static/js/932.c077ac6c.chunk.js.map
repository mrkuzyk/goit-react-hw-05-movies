{"version":3,"file":"static/js/932.c077ac6c.chunk.js","mappings":"4LACA,EAAuB,yBAAvB,EAAuD,yBAAvD,EAAwF,0BAAxF,EAAwH,wB,SC+BxH,EA5BmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACZC,GAAWC,EAAAA,EAAAA,MAGjB,OACI,eAAIC,UAAWC,EAAf,SACKJ,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACR,eAAaL,UAAWC,EAAxB,UACI,UAAC,KAAD,CACIK,GAAE,kBAAaH,GACfH,UAAWC,EACXM,MAAO,CAAEC,KAAMV,GAHnB,WAKI,gBACIW,IAAMJ,EAAW,yCACuBA,GAb1C,gGAgBEK,IAAKN,EACLJ,UAAWC,IAEdG,MAdAD,U,yGCVzB,EAA4B,6BAA5B,EAAsE,8BAAtE,EAA6G,0BAA7G,EAAqJ,+BAArJ,EAA4L,yB,SCsD5L,EApDmB,WAEf,OAAwCQ,EAAAA,EAAAA,MAAxC,eAAqBC,GAArB,WACIC,EAAQ,GAuBZ,OACI,mBAAQb,UAAWC,EAAnB,UACI,kBAAMa,SAjBO,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAIM,KAAjBL,EAAMM,QAKVP,EAAgB,CAAEQ,MAAOP,IACzBI,EAAKI,SALDC,MAAM,uMAUyBtB,UAAWC,EAA1C,WACQ,mBACIsB,KAAK,SACLvB,UAAWC,EAFf,UAII,iBAAMD,UAAWC,EAAjB,uBAGR,4BACI,kBACID,UAAWC,EACXuB,KAAK,OACLD,KAAK,OACLE,SAnCK,SAACV,GACtBF,EAAQE,EAAEG,cAAcQ,MAAMC,eAmCdC,aAAa,MACbC,WAAS,EACTC,YAAY,0B,2BCUpC,EAjDoB,WAChB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOlC,EAAP,KAAemC,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA4BH,EAAAA,EAAAA,WAAS,GAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAAsCL,EAAAA,EAAAA,UAAS,MAA/C,eAAOM,EAAP,KAAoBC,EAApB,KACA,GAAuB3B,EAAAA,EAAAA,MACjBS,GADN,eAC2BmB,IAAI,SAyB/B,OAvBAC,EAAAA,EAAAA,YAAU,WAEDpB,IAILgB,GAAU,IAEVK,EAAAA,EAAAA,IAAiBrB,GACZsB,MAAK,SAAA7C,GACFmC,EAAUnC,EAAO8C,SACjBL,EAAezC,EAAO+C,kBAEzBC,OAAM,SAAAZ,GACHC,EAASD,MAEZa,SAAQ,WACLV,GAAU,SAIpB,CAAChB,KAGC,iBAAKpB,UAAU,YAAf,WACI,SAAC,EAAD,KACEoB,IAAS,SAAC,KAAD,IACM,IAAhBiB,IACG,SAAC,KAAD,CACIb,KAAMJ,IAGba,IAAS,SAAC,KAAD,CAAcA,MAAOA,EAAMc,UACpCZ,IAAU,SAACa,EAAA,EAAD,IACVnD,IAAWoC,IACR,SAACgB,EAAA,EAAD,CAAYpD,OAAQA","sources":["webpack://react-homework-template/./src/movies/ListMovies/ListMovies.module.css?b9e9","movies/ListMovies/ListMovies.jsx","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/SearchMovie/SearchMovie.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListMovies_list__NgCox\",\"item\":\"ListMovies_item__EzX4C\",\"movie\":\"ListMovies_movie__y0837\",\"img\":\"ListMovies_img__jGOkZ\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from './ListMovies.module.css';\n\nconst ListMovies = ({ movies }) => {\n    const location = useLocation();\n    const templatePhoto = 'https://raw.githubusercontent.com/h0wter/JS-Project/main/src/images/default_img/filmoteka.jpg';\n\n    return (\n        <ul className={s.list}>\n            {movies.map(({ id, title, poster_path }) =>\n                <li key={id} className={s.item}>\n                    <Link\n                        to={`/movies/${id}`}\n                        className={s.movie}\n                        state={{ from: location }}\n                    >\n                        <img\n                            src={ poster_path\n                                ? `https://image.tmdb.org/t/p/w400${poster_path}`\n                                : templatePhoto\n                            }\n                            alt={title}\n                            className={s.img}\n                        />\n                        {title}\n                    </Link>\n                </li>)}\n        </ul>\n    );\n};\n\nexport default ListMovies;\n\nListMovies.propTypes = {\n    movies: PropTypes.array.isRequired\n}","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBar_searchbar__xBucJ\",\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"button\":\"SearchBar_button__T7RTc\",\"buttonLabel\":\"SearchBar_buttonLabel__HaGuZ\",\"input\":\"SearchBar_input__bIy50\"};","import { useSearchParams } from 'react-router-dom';\nimport s from './SearchBar.module.css'\n\nconst  SearchBar = () => {\n    // eslint-disable-next-line\n    const [searchParams, setSearchParams] = useSearchParams();\n    let input = '';\n\n    // console.log(query)\n    const handleNameChange = (e) => {\n        input = e.currentTarget.value.toLowerCase() // значення з інпут\n        // console.log(input);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const form = e.currentTarget; // форма\n        // console.log(form);\n\n        // якщо пошук пустий, то помилку викидаю\n        if (input.trim() === '') {\n            alert('Ще раз таке зробиш, і я викличу поліцію');\n            return\n        };\n        \n        setSearchParams({ query: input}) // зберігаю запит в парамс\n        form.reset(); // очищую форму\n    };\n\n    return (\n        <header className={s.searchbar}>\n            <form onSubmit={ handleSubmit} className={s.searchForm}>\n                    <button\n                        type=\"submit\"\n                        className={s.button}\n                    >\n                        <span className={s.buttonLabel}>Search</span>\n                    </button>\n\n                <label>\n                    <input\n                        className={s.input}\n                        name=\"name\"\n                        type=\"text\"\n                        onChange={handleNameChange}\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search movies\"\n                    />\n                </label>\n            </form>\n        </header>\n    );\n};\n\nexport default SearchBar;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovie } from \"api/fetchApi\";\nimport SearchBar from \"components/SearchBar/SearchBar\";\nimport ListMovies from \"movies/ListMovies/ListMovies\";\nimport { StartSearch, MovieNotFound, ErrorMessage } from 'components/MessageTitle/MessageTitle';\nimport Loader from \"components/Loader/Loader\";\n\nconst SearchMovie = () => {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [loader, setLoader] = useState(false);\n    const [totalMovies, setTotalMovies] = useState(null);\n    const [searchParams] = useSearchParams();\n    const query = searchParams.get(\"query\");\n\n    useEffect(() => {\n        //щоб не рендилося одразу при завантажені , роблю перевірку на те чи є запит\n        if (!query) {\n            return\n        }\n\n        setLoader(true); // включаю лоадер\n        \n        fetchSearchMovie(query)\n            .then(movies => {\n                setMovies(movies.results);\n                setTotalMovies(movies.total_results)\n            })\n            .catch(error =>{\n                setError(error);\n            })\n            .finally(() => {\n                setLoader(false); // виключаю лоадер\n            })\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[query]);\n\n    return (\n        <div className=\"container\">\n            <SearchBar/>\n            {!query && <StartSearch/>}\n            {totalMovies === 0 && \n                <MovieNotFound\n                    name={query}\n                />\n            }\n            {error && <ErrorMessage error={error.message} />}\n            {loader && <Loader/> }\n            {movies && !error && \n                <ListMovies movies={movies}/>\n            }\n        </div>\n    )\n};\n\nexport default SearchMovie;"],"names":["movies","location","useLocation","className","s","map","id","title","poster_path","to","state","from","src","alt","useSearchParams","setSearchParams","input","onSubmit","e","preventDefault","form","currentTarget","trim","query","reset","alert","type","name","onChange","value","toLowerCase","autoComplete","autoFocus","placeholder","useState","setMovies","error","setError","loader","setLoader","totalMovies","setTotalMovies","get","useEffect","fetchSearchMovie","then","results","total_results","catch","finally","message","Loader","ListMovies"],"sourceRoot":""}